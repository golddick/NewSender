generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // optional but useful for pooling configs
}

// ========== ENUMS ==========
enum Plan {
  FREE
  LUNCH
  SCALE
}

enum Role {
  USER
  NEWSLETTEROWNER
  THENEWSADMIN
}

enum PlanSubscriptionStatus {
  active
  inactive
  past_due
  cancelled
}

enum SubscriptionStatus {
  Subscribed
  Unsubscribed
}

enum CampaignTrigger {
  new_user
  Subscriber
  unsubscribe
  notification
}

enum CampaignStatus {
  active
  inactive
}

enum IntegrationStatus {
  active
  inactive
}

enum EmailStatus {
  SENT
  SAVED
  FAILED
  PENDING
}


enum ScheduleType {
  immediate
  scheduled
  draft
}

enum EmailType {
  automated
  instant
  scheduled
}

// ========== MODELS ==========

model Membership {
  id                         String                 @id @default(uuid())
  userId                     String                 @unique
  paystackCustomerId         String?
  paystackSubscriptionId     String?
  plan                       Plan                   @default(FREE)
  role                       Role                   @default(USER)
  subscriptionStatus         PlanSubscriptionStatus @default(inactive)
  currentPeriodEnd           DateTime?
  email                      String
  organization               String?
  amount                     Int                    @default(0)
  currency                   String                 @default("NGN")
  lastPaymentDate            DateTime?
  nextPaymentDate            DateTime?
  subscriberLimit            Int                    @default(500)
  emailLimit                 Int                    @default(5)
  campaignLimit              Int                    @default(3)
  appIntegratedLimit         Int                    @default(2)
  termsAndConditionsAccepted Boolean                @default(false)
  usage                      MembershipUsage[]
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt

  @@index([paystackCustomerId])
  @@index([paystackSubscriptionId])
}

model MembershipUsage {
  id                String   @id @default(uuid())
  userId            String
  month             String
  emailsSent        Int      @default(0)
  subscribersAdded  Int      @default(0)
  campaignsCreated  Int      @default(0)
  appIntegrated     Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  membership Membership @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, month], name: "userId_month")
  @@index([userId])
  @@index([month])
}

model Integration {
  id             String            @id @default(uuid())
  name           String            @unique
  url            String
  logo           String?
  email          String?
  status         IntegrationStatus @default(inactive)
  category       String
  description    String?
  apiKey         String?           @map("api_key")
  webhookUrl     String?           @map("webhook_url")
  campaigns      Int?              @default(0)
  subscribers    Int?              @default(0)
  recipients     Int?              @default(0)
  emailsSent     Int?              @default(0) @map("emails_sent")
  openRate       Float?            @map("open_rate")
  clickRate      Float?            @map("click_rate")
  conversionRate Float?            @map("conversion_rate")
  lastSync       DateTime?         @map("last_sync")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  userId         String            @map("user_id")

  Campaign   Campaign[]
  Subscriber Subscriber[]
  Email      Email[]
  AutoTrigger AutoTrigger[]

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([name])
  @@map("integrations")
}

model Campaign {
  id            String          @id @default(uuid())
  name          String          @unique
  userId        String
  description   String?
  trigger       CampaignTrigger
  status        CampaignStatus  @default(active)
  integrationId String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailsSent     Int             @default(0)
  recipients     Int?       @default(0)
  openRate      Float?          @map("open_rate")
  clickRate     Float?          @map("click_rate")
  lastSentAt    DateTime?      @map("last_sent_at")
  integration Integration  @relation(fields: [integrationId], references: [id])
  subscribers Subscriber[]
  emails      Email[]
  autoTrigger AutoTrigger? @relation("CampaignToAutoTrigger")

  @@index([integrationId])
  @@index([status])
  @@index([trigger])
}

model Subscriber {
  id                String             @id @default(cuid())
  email             String
  name              String?
  newsLetterOwnerId String
  source            String             @default("unknown")
  status            SubscriptionStatus @default(Subscribed)
  campaignId        String?  
  integrationId     String
  pageUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign    Campaign?    @relation(fields: [campaignId], references: [id])
  integration Integration @relation(fields: [integrationId], references: [id])

  @@unique([email, newsLetterOwnerId, integrationId, campaignId], name: "unique_subscriber_key")
}

model Email {
  id                String      @id @default(uuid())
  title             String      @unique
  content           String
  textContent       String?
  previewText       String?
  emailSubject      String?
  template          String?
  status            EmailStatus @default(SENT)
  newsLetterOwnerId String
  campaignId        String   
  integrationId     String
  messageId         String?
  emailsSent        Int       @default(0)
  openCount         Int       @default(0)
  clickCount        Int       @default(0)
  recipients        Int?       @default(0)
  bounceCount       Int?       @default(0)
  lastOpened        DateTime?
  lastClicked       DateTime?
  sentAt            DateTime?
  openedByIps       String[]  @default([])
  openedByEmails    String[] @default([])
  clickedByEmails   String[] @default([])
  clickedByIps      String[]  @default([])

  emailType         String     //automated // instant 
  clickedLinks      ClickedLink[]
  campaign          Campaign     @relation(fields: [campaignId], references: [id])
  integration       Integration   @relation(fields: [integrationId], references: [id])

  //schedule fields
  scheduleType       String   // "immediate" | "scheduled" | "draft"
  scheduleDate       DateTime?
  scheduleTime       String?  // or DateTime if you store full datetime

  trackOpens         Boolean  @default(true)
  trackClicks        Boolean  @default(true)
  enableUnsubscribe  Boolean  @default(true)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AutoTrigger {
  id            String          @id @default(uuid())
  name          CampaignTrigger @unique
  description   String?
  trigger       CampaignTrigger
  status        CampaignStatus  @default(active)
  integrationId String
  campaignId    String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  integration Integration @relation(fields: [integrationId], references: [id])
  campaign    Campaign    @relation("CampaignToAutoTrigger", fields: [campaignId], references: [id])

  @@index([integrationId])
  @@index([status])
}




model ClickedLink {
  id        String   @id @default(uuid())
  emailId   String
  url       String
  clickedAt DateTime @default(now())

  email Email @relation(fields: [emailId], references: [id])

  @@index([emailId])
}
