


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// ========== ENUMS ==========
enum Plan {
  FREE
  LAUNCH
  SCALE
}

enum Role {
  USER
  NEWSLETTEROWNER
  THENEWSADMIN
  BLOGADMIN
  BLOGAUTHOR
}

enum PlanSubscriptionStatus {
  active
  inactive
  past_due
  cancelled
}

enum SubscriptionStatus {
  Subscribed
  Unsubscribed
}

enum CampaignTrigger {
  new_user
  Subscriber
  unsubscribe
  notification
  new_blog_post

}

enum CampaignStatus {
   ACTIVE
  INACTIVE
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
}

enum EmailStatus {
  SENT
  SAVED
  FAILED
  PENDING
}


enum EmailType {
  AUTOMATED
  INSTANT
  DRAFT
  SCHEDULE
}

enum NotificationType {
  EMAIL
  SYSTEM
  PUSH
  SMS
}

enum NewsletterOwnerNotificationCategory {
  WELCOME
  NEWSLETTER
  NEW_BLOG
  KYC_APPROVAL
  FLAGGED
  FLAGGED_RESOLVED
}
enum SystemNotificationCategory {
  WELCOME
  NEWSLETTER
  NEW_BLOG
  BLOG_APPROVAL
  BLOG_POST_ENAGEMENT
  FLAGGED
  FLAGGED_RESOLVED
  NEW_KYC
  KYC_APPROVAL
  PAYMENT_SUCCESS
  CAMPAIGN_ALERT
  SECURITY_ALERT
  INTEGRATION_SUCCESS
  SUBSCRIPTION_REMINDER
  ACHIEVEMENT
}

enum NotificationStatus {
  DRAFT
  PENDING
  SENDING
  SENT
  DELIVERED
  FAILED
}

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}
enum FlagStatus {
  FLAGGED
  RESOLVED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  MEMBERS_ONLY
}

enum ContentFormat {
  MARKDOWN
  HTML
  RICH_TEXT
}

enum AIGenerationStatus {
  PENDING
  COMPLETED
  FAILED
  IN_PROGRESS
}
enum KYCAccountType {
  INDIVIDUAL
  ORGANIZATION
}
enum KYCStatus {
 PENDING
 COMPLETED
 REJECTED
 APPROVED
 IN_PROGRESS
}

// ========== MODELS ==========

model Membership {
  id                         String                 @id @default(uuid())
  userId                     String                 @unique
  fullName                   String
  userName                   String
  imageUrl                   String?
  paystackCustomerId         String?
  paystackSubscriptionId     String?
  plan                       Plan                   @default(FREE)
  role                       Role                   @default(USER)
  subscriptionStatus         PlanSubscriptionStatus @default(inactive)
  currentPeriodEnd           DateTime?
  email                      String
  organization               String?
  organizationUrl            String?
  kycStatus                  KYCStatus              @default(PENDING)
  SenderName                 String?
  amount                     Int                    @default(0)
  currency                   String                 @default("NGN")
  lastPaymentDate            DateTime?
  nextPaymentDate            DateTime?
  successfulPayments         Int                    @default(0)
  failedAttempts             Int                    @default(0)
  subscriberLimit            Int                    @default(500)
  emailLimit                 Int                    @default(5)
  campaignLimit              Int                    @default(3)
  blogPostLimit              Int                    @default(10) 
  aiGenerationLimit          Int                    @default(5) 
  termsAndConditionsAccepted Boolean                @default(false)
  approvedKYC                Boolean                @default(false)
  usage                      MembershipUsage[]
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  blogPosts                  BlogPost[]
  aIContentGenerationToExcerpt       BlogAIGeneration[]
  blogComments               BlogComment[]
  reportedComments           ReportedComment[]
  emails                    Email[]
  notificationEmails        NewsletterOwnerNotification[]
  notificationSettings      NotificationSettings[]
  kyc                       KYC[]
  invoices                  Invoice[]
  postViews                BlogPostView[]

  apiKeys                 ApiKey[]
  flagedPosts               BlogPostFlag[]
 

  @@index([paystackCustomerId])
  @@index([paystackSubscriptionId])
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  description String
  amount      Int
  status      String
  invoiceUrl  String
  date        DateTime @default(now())
  externalId  String?

  user        Membership @relation(fields: [userId], references: [userId])
}

model ThirdPartyOTP {
  email     String @id
  code      String
  expiresAt DateTime
  createdBy String   // which API consumer triggered
  createdAt DateTime @default(now())
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  keyHash   String    @unique // hashed xapi key
  jwt       String   // signed JWT with claims
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      Membership     @relation(fields: [userId], references: [userId])
}



model KYC {
  id          String    @id @default(cuid())
  userId      String    @unique
  accountType  KYCAccountType
  status      KYCStatus  @default(PENDING)
  levels      Json      // Stores all KYC level data
  documents   Json      // Stores document references
  livePhoto   String?   // Base64 or URL to stored live photo
  reviewedTime  DateTime?
  reviewedBy  String?
  rejectedResponse String?
  comments     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        Membership      @relation(fields: [userId], references: [userId])
  kycDocuments KYCDocument[]
}

model KYCDocument {
  id          String   @id @default(cuid())
  kycId       String
  type        String   // "id_front", "id_back", "address_proof", etc.
  url         String
  key         String   // Unique identifier for the file
  uploadedAt  DateTime @default(now())
  kyc         KYC      @relation(fields: [kycId], references: [id])
}

model MembershipUsage {
  id                String   @id @default(uuid())
  userId            String
  month             String
  emailsSent        Int      @default(0)
  subscribersAdded  Int      @default(0)
  campaignsCreated  Int      @default(0)
  blogPostsCreated  Int      @default(0) // Added for blog feature
  aiGenerationsUsed Int      @default(0) // Added for AI content generation
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  membership Membership @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, month], name: "userId_month")
  @@index([userId])
  @@index([month])
}



model BlogPost {
  id               String         @id @default(uuid())
  title            String
  subtitle         String?
  slug             String         @unique
  content          String
  excerpt          String?
  format           ContentFormat  @default(MARKDOWN)
  status           PostStatus     @default(DRAFT)
  visibility       PostVisibility @default(PUBLIC)
  featuredImage    String
  featuredVideo    String?
  galleryImages    String[]
  authorId         String
  authorBio        String
  authorTitle      String  
  author           String
  categoryId       String?
  seoTitle         String?
  seoDescription   String?
  seoKeywords      String[]
  seoScore         Int            @default(0)
  shares           Int            @default(0)
  readTime         Int            @default(0)
  wordCount        Int            @default(0)
  characterCount   Int            @default(0)
  likes            Int            @default(0)
  views            Int            @default(0)
  flagReason       String?
  comments         BlogComment[]
  tags             BlogTag[]
  isFlagged       Boolean        @default(false)
  isFeatured       Boolean        @default(false)
  isPinned         Boolean        @default(false)
  allowComments    Boolean        @default(true)
  publishedAt      DateTime?
  flaggedAt        DateTime?
  scheduledAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  aiGeneration     BlogAIGeneration? @relation("AIContentGenerationToExcerpt",fields: [generatedById], references: [id])
  generatedById    String?        // Reference to AI generation if applicable
  membership       Membership     @relation(fields: [authorId], references: [userId])
  category         BlogCategory?      @relation(fields: [categoryId], references: [id])
  viewsCount       BlogPostView[]
  flaggedPosts       BlogPostFlag[]



  @@index([authorId])
  @@index([status])
  @@index([visibility])
  @@index([publishedAt])
  @@index([slug])
}

model BlogPostFlag {
  id        String   @id @default(cuid())
  reason    String
  comment  String
  flaggedBy  String
  status    FlagStatus  @default(FLAGGED) 
  createdAt DateTime @default(now())
  reviewedAt DateTime?
  postId    String
  userId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      Membership     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model BlogPostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  member Membership @relation(fields: [userId], references: [userId])
  post      BlogPost @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}


model BlogCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model BlogTag {
  id        String     @id @default(uuid())
  name      String     @unique
  slug      String     @unique
  posts     BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model BlogComment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  userId    String
  parentId  String?
  likes     Int      @default(0)
  status    String   @default("approved") // approved, pending, spam, trash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      BlogPost @relation(fields: [postId], references: [id])
  parent    BlogComment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies   BlogComment[] @relation("CommentToComment")
  member    Membership @relation(fields: [authorId], references: [userId])
  reportedComments ReportedComment[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([status])
}

model ReportedComment {
  id        String   @id @default(cuid())
  commentId String
  blogSlug   String
  blogOwner  String
  parentCommentBy String
  reportedBy String
  reason    String?
  member Membership @relation(fields: [reportedBy], references: [userId])
  comment   BlogComment @relation(fields: [commentId], references: [id])
  reportedAt DateTime @default(now())
  resolved  Boolean  @default(false)
}

model BlogAIGeneration {
  id          String            @id @default(uuid())
  prompt      String
  parameters  Json?
  status      AIGenerationStatus @default(COMPLETED)
  output      String
  format      ContentFormat     @default(MARKDOWN)
  cost        Float?
  tokensUsed  Int?
  model       String?
  userId      String
  createdAt   DateTime          @default(now())
  completedAt DateTime?

  // Relations
  membership Membership @relation(fields: [userId], references: [userId])
  blogPosts  BlogPost[] @relation("AIContentGenerationToExcerpt")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}



// ========== EXISTING MODELS (from your schema) ==========



model Campaign {
  id            String          @id @default(uuid())
  name          String          @unique
  userId        String
  description   String?
  type          String?
  status        CampaignStatus  @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailsSent     Int             @default(0)
  recipients     Int?       @default(0)
  openRate      Float?          @map("open_rate")
  clickRate     Float?          @map("click_rate")
  lastSentAt    DateTime?      @map("last_sent_at")
  emails      Email[]

  @@index([status])
}

model Subscriber {
  id                String             @id @default(cuid())
  email             String
  name              String?
  newsLetterOwnerId String
  source            String             @default("unknown")
  status            SubscriptionStatus @default(Subscribed)
  campaignId        String?  
  pageUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, newsLetterOwnerId], name: "unique_subscriber_key")
}

model Email {
  id                String      @id @default(uuid())
  title             String      @unique
  content           String
  userId            String
  textContent       String?
  previewText       String?
  emailSubject      String?
  template          String?
  status            EmailStatus @default(SENT)
  newsLetterOwnerId String
  campaignId        String?  
  integrationId     String?
  messageId         String?
  emailsSent        Int       @default(0)
  openCount         Int       @default(0)
  clickCount        Int       @default(0)
  recipients        Int?       @default(0)
  bounceCount       Int?       @default(0)
  lastOpened        DateTime?
  lastClicked       DateTime?
  sentAt            DateTime?
  openedByIps       String[]  @default([])
  openedByEmails    String[] @default([])
  clickedByEmails   String[] @default([])
  clickedByIps      String[]  @default([])

  emailType         EmailType     //automated // instant 
  clickedLinks      ClickedLink[]
  campaign          Campaign?     @relation(fields: [campaignId], references: [id])
  user             Membership     @relation(fields: [userId], references: [userId])
  //schedule fields
  scheduleDate       DateTime?
  scheduleTime       String?  // or DateTime if you store full datetime

  trackOpens         Boolean  @default(true)
  trackClicks        Boolean  @default(true)
  enableUnsubscribe  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterOwnerNotification {
  id                String              @id @default(uuid())
  type              NotificationType
  category          NewsletterOwnerNotificationCategory
  title             String
  content           Json
  textContent       String?
  htmlContent       String?               
  status            NotificationStatus  @default(PENDING)
  priority          NotificationPriority @default(MEDIUM)
  
  // User relation
  userId            String
  user              Membership                @relation(fields: [userId], references: [userId])
  
  
  // Email specific fields
  emailsSent        Int?                @default(0)
  openCount         Int?                @default(0)
  clickCount        Int?                @default(0)
  recipients        Int?                @default(0)
  bounceCount       Int?                @default(0)
  openedByEmails    String[] @default([])
  clickedByEmails   String[] @default([])
  lastOpened        DateTime?
  lastClicked       DateTime?
  
  
  // System notification metadata
  metadata          Json?
  
  // Timestamps
  sentAt            DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Read status
  read              Boolean             @default(false)

  NotificationEmailClickedLink NotificationEmailClickedLink[]
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([category])
}
model SystemNotification {
  id                String              @id @default(uuid())
  type              NotificationType
  category          SystemNotificationCategory
  title             String
  content           Json
  textContent       String?
  htmlContent       String?               
  status            NotificationStatus  @default(PENDING)
  priority          NotificationPriority @default(MEDIUM)
  

  
  recipient         Int                 @default(0)
  
  // Email specific fields
  emailsSent        Int?                @default(0)
  openCount         Int?                @default(0)
  clickCount        Int?                @default(0)
  recipients        Int?                @default(0)
  bounceCount       Int?                @default(0)
  openedByEmails    String[] @default([])
  clickedByEmails   String[] @default([])
  lastOpened        DateTime?
  lastClicked       DateTime?
  
  
  // System notification metadata
  metadata          Json?
  
  // Timestamps
  sentAt            DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Read status
  read              Boolean             @default(false)

  NotificationEmailClickedLink NotificationEmailClickedLink[]
  
  @@index([status])
  @@index([type])
  @@index([category])
}

model NotificationSettings {
  id                          String    @id @default(uuid())
  
  // User relation
  userId                      String    @unique
  user                        Membership      @relation(fields: [userId], references: [userId])
  
  // Delivery preferences
  emailNotifications          Boolean   @default(true)
  pushNotifications           Boolean   @default(false)
  smsNotifications            Boolean   @default(false)
  
  // Category preferences
  marketingEmails             Boolean   @default(false)
  securityAlerts              Boolean   @default(true)
  productUpdates              Boolean   @default(true)
  newsletterReminders         Boolean   @default(true)
  campaignReports             Boolean   @default(true)
  blogApprovalNotifications   Boolean   @default(true)
  kycNotifications            Boolean   @default(true)
  paymentNotifications        Boolean   @default(true)
  integrationNotifications    Boolean   @default(true)
  achievementNotifications    Boolean   @default(true)
  
  // Digest preferences
  weeklyDigest                Boolean   @default(true)
  instantAlerts               Boolean   @default(true)
  
  // Alert preferences
  lowEngagementAlerts         Boolean   @default(false)
  highEngagementAlerts        Boolean   @default(true)
  bounceAlerts                Boolean   @default(true)
  unsubscribeAlerts           Boolean   @default(false)
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}


model ClickedLink {
  id        String   @id @default(uuid())
  emailId   String
  url       String
  clickedAt DateTime @default(now())
  clickedBy String?

  email Email @relation(fields: [emailId], references: [id])

  @@index([emailId])
}
model NotificationEmailClickedLink {
  id        String   @id @default(uuid())
  notificationEmailId String?
  systemNotificationId String?
  url       String
  clickedAt DateTime @default(now())
  clickedBy String?

  
  notificationEmail NewsletterOwnerNotification? @relation(fields: [notificationEmailId], references: [id])
  systemNotification SystemNotification? @relation(fields: [systemNotificationId], references: [id])

  @@index([notificationEmailId])
}